package com.yhs.pf.controller;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.yhs.pf.service.AttachService;
import com.yhs.pf.service.NoticeService;
import com.yhs.pf.util.FileUtil;

@Controller
public class NoticeController {
	//로그를 표시하기 위한 logger 선언
	private Logger logger = Logger.getLogger(NoticeController.class);
	@Autowired private NoticeService nService;
	@Autowired private AttachService aService;
	@Autowired private FileUtil fUtil;
	
	//config 파일에 설정한 project.context.path의 값을 contextRoot의 변수에 입력하는 어노테이션
	@Value("#{config['project.context.path']}")
	private String contextRoot;
	
	/**
	 * 게시글 목록 표시 
	 * @param 필요한 파라미터가 없을 경우 자동적으로 초기화 하도록 3항 연산자를 사용.
	 * @return /notice/list.jsp로 이동
	 */
	@RequestMapping("/notice/list.do")
	public ModelAndView list(@RequestParam HashMap<String, Object> params) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("notice/list"); // list.jsp 지정 (spring_pf_01/pages/  .jsp를 servlet.xml 에서 지정)
		if(params.containsKey("msg")) mv.addObject("msg",params.get("msg")); //msg가 존재하는 경우 list.jsp로 msg를 넘겨줌
		//페이징 처리 1. 현재 페이지, 보여줄 게시글 수
		//containsKey : 해당 키가 값을 가지고 있을 경우 true , 값이 없을 경우 false로 나옴
		if(!params.containsKey("typeSeq")) params.put("typeSeq", 1); // 공지사항 게시판 번호 입력.
		int currentPage = params.containsKey("currentPage")? Integer.parseInt((String)params.get("currentPage")) : 1;
		int pageArticleSize = params.containsKey("pageArticleSize")?Integer.parseInt((String)params.get("pageArticleSize")):10;
		int totalArticleCnt = nService.getTotalCount(params); // 총 게시글의 숫자 
		int totalPageCnt = (int)Math.ceil((double) totalArticleCnt / pageArticleSize) ; //총게시글수와 페이지당보여줄게시글수로 총 페이지수 계산
		int startIdx = ((currentPage-1) * pageArticleSize); //현재 페이지에서 보여줄 첫 글 번호
		int endIdx = (currentPage * pageArticleSize) -1; // 현재 페이지에서 보여 줄 마지막 게시글 번호
		endIdx = (totalArticleCnt > endIdx)? endIdx : totalArticleCnt; //총 게시글수가 마지막 번호보다 클 경우 표시하지 않음.
		int pageBlockSize = 10;
		int pageBlockStart = (((currentPage-1)/pageBlockSize)*pageBlockSize) +1 ; //페이지 블록의 시작점
		int pageBlockEnd = (((currentPage-1)/pageBlockSize)*pageBlockSize) +pageBlockSize ; //페이지 블록의 마지막점
		pageBlockEnd = (totalPageCnt > pageBlockEnd)? pageBlockEnd : totalPageCnt; //총 페이지 수가 페이지블록의 끝보다 크다면 총 페이지 수로 나오도록
		// 게시글 전체를 가져온다.
		params.put("startIdx", String.valueOf(startIdx)); // 파라미터를 가지는 맵에 시작번호를 입력
		params.put("pageArticleSize", String.valueOf(pageArticleSize)); // 파라미터를 가지는 맵에 1페이지당 보여줄 게시글 수 입력
		logger.debug("/notice/list.do params -  " + params); //로그에 각 게시판 항목 표시
		List<HashMap<String,Object>> board = nService.selectList(params); //게시글을 불러오는 Service 메서드를 호출하여 결과를 List<Map>으로 받음
		
		// 검색 옵션이 활성화 되어있을 경우 해당 게시글만을 보여줄수 있도록 함.
		// 검색한 게시글에서 페이지 이동을 할 경우에도 검색 조건을 다시 송신하여 검색한 내용이 남아있도록 함.
		mv.addObject("searchType", params.get("searchType") );
		mv.addObject("searchText", params.get("searchText") );
		
		mv.addObject("list",board);
		mv.addObject("currentPage",currentPage);
		mv.addObject("pageBlockSize",pageBlockSize);
		mv.addObject("pageBlockStart",pageBlockStart);
		mv.addObject("pageBlockEnd",pageBlockEnd);
		mv.addObject("totalPageCnt", totalPageCnt); //List를 표시하기 위한 파라미터를 addObject로 입력하여 jsp로 보내기
		return mv;
	}
	
	/**
	 * 글쓰기 페이지로 이동
	 * @return views/notice/write.jsp
	 */
	@RequestMapping("/notice/goWritePage.do")
	public ModelAndView goWritePage() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("notice/write");
		return mv;
	}
	
	/**
	 * 게시글 작성
	 * @param params 게시판 번호, 사용자ID, 닉네임, 제목, 내용
	 * @return 글 작성 완료시 게시판 화면으로 오류시 글 작성 화면으로 이동.
	 */
	@RequestMapping("/notice/write.do")
	public ModelAndView write(@RequestParam HashMap<String, Object> params,HttpSession session, MultipartHttpServletRequest mFiles) {
		ModelAndView mv = new ModelAndView();
		params.put("memberIdx",session.getAttribute("memberIdx"));
		List<MultipartFile> mFile = mFiles.getFiles("file"); // 첨부 된 파일들을 복수의 파일을 List로 저장 
		for(MultipartFile file : mFile) {
			if(!file.getOriginalFilename().equals("")) { // 파일명이 공백이 아니라면. = 첨부파일이 존재한다면
				params.put("hasFile","1"); //첨부파일 존재 여부 를 1로 변경
			}else {
				if(!params.containsKey("hasFile")) {
					params.put("hasFile","0");
				} else if(params.get("hasFile").equals("0")) {
					params.put("hasFile","0");					
				}
			}
		}
		logger.debug("/notice/write.do params = " + params);
		nService.write(params, mFile);
		// 받은 파라미터를 Service로 넘겨주어 list.do로 이동.
		RedirectView rv = new RedirectView(contextRoot+"/notice/list.do");
		mv.setView(rv);
		return mv;
	}
	
	/**
	 * 게시글 읽기
	 * @param params 게시판 번호, 게시글 번호, 출력 메시지.
	 * @return 게시판 항목을 담은 MAP과 msg를 넘겨받았을 경우에만 msg 문자열을 jsp로 출력. 
	 */
	@RequestMapping("/notice/read.do")
	public ModelAndView read(@RequestParam HashMap<String, Object> params){
		logger.debug("/notice/read.do params " + params);
		ModelAndView mv = new ModelAndView();
		int typeSeq = Integer.parseInt((String)params.get("typeSeq")); //Object Int 변환
		int boardSeq = Integer.parseInt((String)params.get("boardSeq"));
		HashMap<String, Object> board = nService.getBoard(typeSeq, boardSeq); // 해당 조건의 게시글 1개를 불러와 Map으로 저장
		logger.debug("/notice/read.do board params " + board);
		String msg = (String)params.get("msg"); //출력 메시지를 받아옴
		if(msg != null) { // 받아온 메시지가 있다면 read.jsp로 전달
			mv.addObject("msg",msg);
		}
		if(((String)board.get("has_file")).equals("1")) { // 첨부파일이 존재한다면
			List<HashMap<String, Object>> result = aService.getAttachFiles(typeSeq, boardSeq); //해당 게시글과 연결된 첨부파일 정보 전부 불러오기
			logger.debug("result params = "+result);
			mv.addObject("files", result); //첨부파일 List 를 송신
		}
		mv.setViewName("notice/read");
		mv.addObject("board", board);
		return mv;
	}
	
	/**
	 * 게시글 삭제 메서드.
	 * @param params 게시판 번호, 게시글 번호
	 * @param session 로그인 확인.
	 * @return 삭제 결과에 따른 메시지 출력
	 */
	@RequestMapping("/notice/delete.do")
	public ModelAndView delete(@RequestParam HashMap<String,String> params, HttpSession session) {
		logger.debug("/notice/delete.do params = " + params);
		ModelAndView mv = new ModelAndView();
		if(session.getAttribute("memberId") != null ) { // 로그인 세션이 유효할 경우에만 실행
			RedirectView rv;
			if(nService.deleteBoard(Integer.parseInt(params.get("typeSeq")), Integer.parseInt(params.get("boardSeq")),params.get("hasFile") ) == 1) {
				rv = new RedirectView(contextRoot+"/notice/list.do"); // 삭제 후 게시판 목록을 불러오기 위해 list.dotf
				mv.addObject("msg","해당 게시글이 삭제되었습니다.");
				mv.setView(rv);
			} else { 
				String url = contextRoot+"/notice/read.do?boardSeq="; // 삭제에 실패하였다면 read.do를 다시 호출
				url = url.concat(Integer.parseInt(params.get("boardSeq"))+"&typeSeq="+Integer.parseInt(params.get("typeSeq")));
				rv = new RedirectView(url);
				mv.addObject("msg","삭제 실패! 관리자에게 문의하세요");
				mv.setView(rv);
			}
		} else { // 로그인이 안된 상태라면 or 로그인 세션이 만료되었다면
			mv.setViewName("common/error");
			mv.addObject("msg","올바른 ID로 삭제해주시기 바랍니다");
			mv.addObject("nextLocation", "/index.do");
		}
		return mv;
	}
	
	/**
	 * 게시글 수정 페이지로 이동, 첨부파일을 가지고 있는 게시글일 경우 해당 게시글의 첨부파일 데이터를 받아와 같이 표시
	 * @param params 회원 ID, 게시판 번호, 게시글 번호, 첨부파일 소지 여부
	 * @param session 로그인 상태를 확인하는 세션
	 * @return 올바른 ID일 경우 /notice/update.jsp로 이동, 세션 에러일 경우 commom/error 페이지에서 index.do로 돌아가도록 송신
	 */
	@RequestMapping("/notice/goUpdatePage.do")
	public ModelAndView goUpdatePage(@RequestParam HashMap<String,String> params, HttpSession session) {
		logger.debug("/notice/goUpdatePage.do params = " + params);
		ModelAndView mv = new ModelAndView();
		if(session.getAttribute("memberId") != null) {
			HashMap<String, Object> board = nService.getBoard(Integer.parseInt(params.get("typeSeq")), Integer.parseInt(params.get("boardSeq")));
			mv.setViewName("notice/update");
			mv.addObject("board", board); // 받아온 글 내용을 update.jsp로 전달
			String msg = params.get("msg");
			if(msg != null) { // 받아온 메시지가 있다면 update.jsp로 전달
				mv.addObject("msg",msg);
			}
			if(board.get("has_file").equals("1")) { // 첨부파일이 있을 경우에 첨부파일 정보를 불러온다.
				List<HashMap<String, Object>> result = aService.getAttachFiles(Integer.parseInt(params.get("typeSeq")), Integer.parseInt(params.get("boardSeq")));
				logger.debug("/notice/goUpdatePage.do attachFiles params = "+result);
				mv.addObject("files", result);
			}
		} else {
			mv.setViewName("common/error"); //에러 통합 페이지
			mv.addObject("msg","로그인 하세요.");
			mv.addObject("nextLocation", "/index.do");
		}
		return mv;
	}
	
	/**
	 * 게시글 수정 메서드. 첨부파일을 받았을 경우 파일을 같이 전송
	 * @param params 닉네임, 첨부파일 소지 여부, 게시판 번호, 게시글 번호, 수정 할 제목, 수정 할 내용
	 * @param session 로그인 상태 확인하는 세션
	 * @param mFiles 첨부 파일
	 * @return 수정 성공시 수정한 글 읽어오기(read.do) 수정 실패시 게시판 목록(list.do)
	 */
	@RequestMapping("notice/update.do")
	public ModelAndView update(@RequestParam HashMap<String,Object> params, HttpSession session, MultipartHttpServletRequest mFiles) {
		logger.debug("/notice/update.do params = " + params);
		ModelAndView mv = new ModelAndView();
		if(session.getAttribute("memberId") != null) {
			List<MultipartFile> mFile = mFiles.getFiles("file"); //input type="file"이 존재해야만 값이 반환됨.
			if(params.get("hasFile").equals("0")) { // 복수의 파일일때 삭제해도 파일이 남아있으므로  hasFile을 변경하지 않도록 설정
				for(MultipartFile mp : mFile) {
					if(!mp.getOriginalFilename().equals("")) {
						params.put("hasFile", "1");
					}else {
						if(!params.containsKey("hasFile")) {
							params.put("hasFile","0");
						} else if(params.get("hasFile").equals("0")) {
							params.put("hasFile","0");					
						}
					}
				}
			}
			RedirectView rv;
			if(nService.updateBoard(params, mFile)  == 1) {
				String url = contextRoot+"/notice/read.do?boardSeq=";
				url += params.get("boardSeq") + "&typeSeq=" + params.get("typeSeq");
				rv = new RedirectView(url);
				mv.addObject("msg","수정 완료");
				mv.setView(rv);
			} else {
				rv = new RedirectView(contextRoot+"/notice/list.do");
				mv.addObject("msg","글 수정에 실패하였습니다.");
				mv.setView(rv);
			}
		} else {
			mv.setViewName("common/error");
			mv.addObject("msg","다시 로그인 하세요.");
			mv.addObject("nextLocation", "/index.do");
		}
		return mv;
	}
	
	/**
	 * DB에 있는 첨부파일 정보에 연결하여 물리 데이터 주소에 있는 파일에 접속하여 다운로드 하는 메서드
	 * @param fileIdx 파일 번호
	 * @param rep 응답할 페이지에 대한 정보와 동작을 전달
	 * @return 다운로드 할 파일을 복사한 Byte단위 배열
	 */
	@ResponseBody
	@RequestMapping("/notice/download.do")
	public byte[] download(@RequestParam int fileIdx, HttpServletResponse rep) {
		logger.debug("/notice/download.do params - "+fileIdx);
		//pk로 첨부파일 정보 조회
		//BoardAttachService 생성
		HashMap<String, Object> fileInfo = aService.getAttachFile(fileIdx);
		logger.debug("/notice/download.do params fileInfo - "+fileInfo);
		
		byte[] b = null;
		if(fileInfo!=null) { //파일이 비어있자지 않다면 파일을 읽어와 돌려보낸다
			b = fUtil.readFile(fileInfo);	//읽기
			
			//한글 인코딩
			String encodingName = null;
			try {
				encodingName = java.net.URLEncoder.encode(fileInfo.get("filename").toString(),"UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			//브라우저에 정보 전달
			rep.setHeader("Content-Disposition", "attachment; filename=\"" + encodingName+"\"");
			rep.setContentType(String.valueOf(fileInfo.get("file_type")));
			rep.setHeader("Pragma", "no-cache");
			rep.setHeader("Cache-Control", "no-cache");
			String tmp = String.valueOf(fileInfo.get("file_size"));
			rep.setContentLength(Integer.parseInt(tmp));
		}
		return b;
	}
	
	/**
	 * 첨부 파일을 삭제 
	 * @param params 파일 번호, 게시판 번호, 게시글 번호
	 * @return 파일을 삭제한 해당 게시글의 수정 페이지로 이동 
	 */
	@RequestMapping("/notice/deleteAttach.do")
	public ModelAndView deleteAttach(@RequestParam HashMap<String,Object> params) {
		ModelAndView mv = new ModelAndView();
		int fileIdx = Integer.parseInt((String)params.get("fileIdx")); //Object -> int 변환
		int typeSeq = Integer.parseInt((String)params.get("typeSeq"));
		int boardSeq = Integer.parseInt((String)params.get("boardSeq"));
		mv.addObject("msg", nService.deleteAttach(fileIdx, typeSeq, boardSeq)); // 첨부파일 삭제
		//첨부파일을 삭제한 후 수정하던 글 페이지로 다시 돌아가도록 경로 지정
		RedirectView rv = new RedirectView(contextRoot+"/notice/goUpdatePage.do?boardSeq="+boardSeq+"&typeSeq="+typeSeq);
		mv.setView(rv);
		return mv;
	}
}
