<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	
	<context:component-scan base-package="com.yhs.pf">
		<!-- regex - 정규식의 약자 -->
		<context:include-filter type="regex" expression="\.*\.service\.*"/>
		<context:include-filter type="regex" expression="\.*\.dao\.*"/>
	</context:component-scan>
	
	<!-- 배치 작업 선언 -->
	<bean id="cronQuartz" class = "org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.yhs.pf.job.AttachJob" />
	</bean>
	<!-- 배치 작업 반복 시간 등록 -->
	<bean id="cronTrigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cronQuartz" />
		<!-- value = 초 분 시 일 월 요일 //ex) 매 분 5초마다 실행: "5 * * * * ?" 5초마다 : "*/5 * * * * ?" -->
		<property name="cronExpression" value="10 * * * * ?" />
	</bean>
	<!-- 배치 작업 스케쥴로 등록 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger1" />
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- db 접속 하기 위해  설정 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- mybatis 기본 설정 (카멜케이스, dto)-->
		<property name="configLocation" value="classpath:mybatis-configuration.xml"/>
		<!-- query 적힌 xml 위치 (dao) -->
		<property name="mapperLocations" value="classpath:sql/SQL.*.xml"/>
		<!-- 트랜잭션 관리를 위한 것 -->
		<property name="transactionFactory">
			<bean class="org.mybatis.spring.transaction.SpringManagedTransactionFactory"/>
		</property>
	</bean>
	
	<!-- dao 위치를 basePackage로 -->
	<!-- 인터페이스가 있는 패키지 위치를 잡아줘야 사용 할 수 있다. -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yhs.pf.dao"/>
	</bean>
	
	
	<!-- 의존관계 때문에 어쩔 수 없이 수동으로 DI 시켜줘야 하는 경우 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="fileUtil" class="com.yhs.pf.util.FileUtil" />

	<!-- 공용 설정 파일 -->
	<util:properties id="config" location="classpath:*config.ini" />
<!-- 	<context:property-placeholder location="classpath:*config.ini"/> -->
	
<!-- 	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config.ini"/>
		<property name="fileEncoding" value="UTF-8" />
	</bean> -->
	

	<!-- component-scan 을 통해 자동으로 등록시켰으므로 수동방식은 필요없다. -->
	<!-- <bean id="mService" class="com.yhs.service.impl.MemberServiceImpl">
		<property name="memberDao" ref="mDao"/>
	</bean>
	
	<bean id="mDao" class="com.yhs.dao.impl.MemberDaoImpl">
		<property name="dataSource" ref="dataSource"/>
	</bean> -->
</beans>